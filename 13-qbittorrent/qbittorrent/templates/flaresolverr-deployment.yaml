apiVersion: apps/v1
kind: Deployment
metadata:
  name: flaresolverr
  namespace: media-server
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: flaresolverr
  template:
    metadata:
      labels:
        app: flaresolverr
    spec:
      containers:
      # WireGuard VPN sidecar without port forwarding
      - name: wireguard
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Installing dependencies..."
          apk add --no-cache curl jq git bash wireguard-tools iptables iproute2 dnsmasq bind-tools
          
          echo "Cloning PIA manual-connections repository..."
          cd /tmp
          git clone https://github.com/MrZeLee/manual-connections.git
          cd manual-connections
          
          echo "Setting up PIA WireGuard connection without Port Forwarding..."
          
          # Run PIA setup script with environment variables
          export PIA_USER="${PIA_USERNAME}"
          export PIA_PASS="${PIA_PASSWORD}"
          export VPN_PROTOCOL=wireguard
          export DISABLE_IPV6=yes
          export DIP_TOKEN=no
          export AUTOCONNECT=true  # Auto-select best server
          export PIA_PF=false  # Disable port forwarding
          export PIA_DNS=true
          export PIA_CONNECT=true
          export MAX_LATENCY=0.1
          
          echo "Starting PIA VPN with run_setup.sh..."
          ./run_setup.sh &
          PIA_PID=$!
          
          # Wait for VPN to be fully established
          echo "Waiting for PIA VPN to be ready..."
          while ! wg show pia > /dev/null 2>&1; do
            echo "Waiting for VPN interface pia to be ready..."
            sleep 5
          done
          echo "VPN interface ready!"
          
          echo "PIA VPN setup completed, monitoring connection..."
          
          # Monitor VPN connection with 12-hour restart and external connectivity check
          START_TIME=$(date +%s)
          RESTART_INTERVAL=43200  # 12 hours in seconds
          
          test_external_connectivity() {
            local services=("ifconfig.me" "icanhazip.com" "checkip.amazonaws.com")
            for service in "${services[@]}"; do
              if timeout 5 curl -s --max-time 3 "$service" >/dev/null 2>&1; then
                return 0
              fi
            done
            return 1
          }
          
          while true; do
            CURRENT_TIME=$(date +%s)
            TIME_DIFF=$((CURRENT_TIME - START_TIME))
            
            # Force restart every 12 hours
            if [ $TIME_DIFF -ge $RESTART_INTERVAL ]; then
              echo "12 hours elapsed, restarting VPN..."
              ./run_setup.sh &
              PIA_PID=$!
              START_TIME=$(date +%s)
              sleep 60
              continue
            fi
            
            VPN_OK=true
            
            # Check interface exists and is up
            if ! ip link show pia | grep -q "state UP"; then
              echo "ERROR: VPN interface pia is down"
              VPN_OK=false
            fi
            
            # Check default route goes through VPN
            if ! ip route | grep -q "default.*dev pia"; then
              echo "ERROR: Default route not through VPN"
              VPN_OK=false
            fi
            
            # Check VPN gateway is reachable
            VPN_GW=$(ip route | grep "default.*dev pia" | awk '{print $3}')
            if [ -n "$VPN_GW" ] && ! ping -c 1 -W 2 "$VPN_GW" >/dev/null 2>&1; then
              echo "ERROR: VPN gateway $VPN_GW unreachable"
              VPN_OK=false
            fi
            
            # Test external connectivity
            if ! test_external_connectivity; then
              echo "ERROR: No external connectivity through VPN"
              VPN_OK=false
            fi
            
            if [ "$VPN_OK" = false ]; then
              echo "Restarting VPN..."
              ./run_setup.sh &
              PIA_PID=$!
              START_TIME=$(date +%s)  # Reset timer on restart
              sleep 60
            else
              echo "VPN connection healthy - External connectivity OK"
              sleep 30
            fi
          done
        env:
        - name: PIA_USERNAME
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: pia-username
        - name: PIA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: pia-password
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard interface is up
              wg show pia > /dev/null 2>&1
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 20  # Allow 5 minutes for VPN setup
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard is running and connected
              wg show pia > /dev/null 2>&1
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard is connected
              wg show pia > /dev/null 2>&1
          initialDelaySeconds: 30
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      
      # FlareSolverr container
      - name: flaresolverr
        image: ghcr.io/flaresolverr/flaresolverr:latest
        securityContext:
          runAsUser: 0
        command:
        - /bin/bash
        - -c
        - |
          echo "Installing iproute2 for ip command..."
          apt-get update && apt-get install -y iproute2
          
          echo "Waiting for VPN interface before starting FlareSolverr..."
          # Wait for pia interface to be available for binding
          while ! ip link show pia > /dev/null 2>&1; do
            echo "Waiting for VPN interface pia..."
            sleep 5
          done
          
          echo "VPN interface ready, starting FlareSolverr..."
          exec /usr/local/bin/python -u /app/flaresolverr.py
        ports:
        - containerPort: 8191
          name: webapi
          protocol: TCP
        env:
        - name: LOG_LEVEL
          value: "info"
        - name: LOG_HTML
          value: "false"
        - name: CAPTCHA_SOLVER
          value: "none"
        startupProbe:
          httpGet:
            path: /
            port: 8191
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 18  # Allow 3 minutes for startup
        livenessProbe:
          httpGet:
            path: /
            port: 8191
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8191
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
      
      # Use cluster DNS initially, VPN will override DNS via iptables rules
      dnsPolicy: ClusterFirst
      restartPolicy: Always