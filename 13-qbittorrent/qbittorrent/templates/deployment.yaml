apiVersion: apps/v1
kind: Deployment
metadata:
  name: qbittorrent
  namespace: media-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: qbittorrent
  template:
    metadata:
      labels:
        app: qbittorrent
    spec:
      containers:
      # WireGuard VPN sidecar with integrated PIA setup
      - name: wireguard
        image: alpine:latest
        command:
        - /bin/sh
        - -c
        - |
          set -e
          
          echo "Installing dependencies..."
          apk add --no-cache curl jq git bash wireguard-tools iptables iproute2
          
          echo "Cloning PIA manual-connections repository..."
          cd /tmp
          git clone https://github.com/pia-foss/manual-connections.git
          cd manual-connections
          
          echo "Patching port_forwarding.sh to save port to file..."
          # Add line to save port to file after the port is displayed
          sed -i '/echo -e Forwarded port/a echo "$port" > /opt/piavpn-manual-port' port_forwarding.sh
          
          echo "Setting up PIA WireGuard connection with Port Forwarding..."
          
          # Run PIA setup script with environment variables
          export PIA_USER="${PIA_USERNAME}"
          export PIA_PASS="${PIA_PASSWORD}"
          export VPN_PROTOCOL=wireguard
          export DISABLE_IPV6=yes
          export DIP_TOKEN=no
          export AUTOCONNECT=true  # Auto-select best server
          export PIA_PF=true  # Enable port forwarding
          export PIA_DNS=true
          export PIA_CONNECT=true  # Connect and maintain port forwarding
          export MAX_LATENCY=0.05
          
          # If PREFERRED_REGION is set, use it; otherwise auto-select best server
          if [ -n "${PIA_REGION}" ]; then
            export PREFERRED_REGION="${PIA_REGION}"
          fi
          
          # Copy jq for qbittorrent-config container before VPN starts
          echo "Copying jq for qbittorrent-config container..."
          mkdir -p /shared/bin /shared/lib
          cp /usr/bin/jq /shared/bin/ 2>/dev/null || true
          cp /lib/ld-musl-*.so.1 /shared/lib/ 2>/dev/null || true
          if [ -f /shared/bin/jq ]; then
            ldd /shared/bin/jq 2>/dev/null | grep "=>" | awk '{print $3}' | while read lib; do
              if [ -f "$lib" ]; then
                cp "$lib" /shared/lib/ 2>/dev/null || true
              fi
            done
          fi
          
          echo "Starting PIA VPN with run_setup.sh..."
          ./run_setup.sh &
          PIA_PID=$!
          
          # Wait for VPN to be fully established
          echo "Waiting for PIA VPN to be ready..."
          while ! wg show pia > /dev/null 2>&1; do
            echo "Waiting for VPN interface pia to be ready..."
            sleep 5
          done
          echo "VPN interface ready!"
          
          echo "Setting up secure iptables rules..."
          
          # Flush existing rules and set default policies
          iptables -F OUTPUT
          iptables -F INPUT
          iptables -P OUTPUT DROP
          iptables -P INPUT DROP
          
          # Allow loopback (essential for local communication)
          iptables -A OUTPUT -o lo -j ACCEPT
          iptables -A INPUT -i lo -j ACCEPT
          
          # Allow qBittorrent web UI ONLY on eth0 (cluster access)
          iptables -A OUTPUT -o eth0 -p tcp --sport 8080 -j ACCEPT
          iptables -A INPUT -i eth0 -p tcp --dport 8080 -j ACCEPT
          
          # Allow ALL other traffic ONLY through VPN interface
          iptables -A OUTPUT -o pia -j ACCEPT
          iptables -A INPUT -i pia -j ACCEPT
          
          # Allow established/related connections
          iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
          iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
          
          echo "Secure iptables rules applied - web UI on eth0, torrents through VPN only"
          
          echo "PIA VPN setup completed, monitoring for port changes..."
          
          # Function to update qBittorrent port
          update_qbittorrent_port() {
            local new_port=$1
            echo "Updating qBittorrent to use port $new_port..."
            
            # Wait for qBittorrent to be ready
            local max_attempts=60
            local attempt=0
            while [ $attempt -lt $max_attempts ]; do
              if curl -s --connect-timeout 5 http://localhost:8080 > /dev/null 2>&1; then
                break
              fi
              echo "Waiting for qBittorrent to start... (attempt $((attempt+1))/$max_attempts)"
              sleep 5
              attempt=$((attempt+1))
            done
            
            if [ $attempt -eq $max_attempts ]; then
              echo "ERROR: qBittorrent not accessible after $max_attempts attempts"
              return 1
            fi
            
            # Login with configured password and set the port
            cookie=$(curl -i -s --connect-timeout 5 --data "username=admin&password=${QB_ADMIN_PASSWORD}" http://localhost:8080/api/v2/auth/login 2>/dev/null | grep -i set-cookie | cut -d' ' -f2)
            
            if [ -n "$cookie" ]; then
              # Set the port via API
              curl -s -X POST http://localhost:8080/api/v2/app/setPreferences \
                --cookie "$cookie" \
                --data "json={\"listen_port\":$new_port}" \
                --connect-timeout 5
              echo "qBittorrent port updated to $new_port"
              
              # Store port for other containers if needed
              echo "$new_port" > /shared/forwarded_port
            else
              echo "WARNING: Failed to login to qBittorrent for port update"
            fi
          }
          
          # Monitor port changes and update qBittorrent
          LAST_PORT=""
          while true; do
            # Check if PIA process is still running
            if ! kill -0 $PIA_PID 2>/dev/null; then
              echo "ERROR: PIA process died, restarting..."
              ./run_setup.sh &
              PIA_PID=$!
            fi
            
            # Check for port changes
            if [ -f /opt/piavpn-manual-port ]; then
              CURRENT_PORT=$(cat /opt/piavpn-manual-port 2>/dev/null || echo "")
              
              if [ -n "$CURRENT_PORT" ] && [ "$CURRENT_PORT" != "$LAST_PORT" ]; then
                echo "Port changed from '$LAST_PORT' to '$CURRENT_PORT'"
                update_qbittorrent_port "$CURRENT_PORT"
                LAST_PORT="$CURRENT_PORT"
              fi
            else
              echo "No /opt/piavpn-manual-port found!"
            fi
            
            sleep 30
          done
        env:
        - name: PIA_USERNAME
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: pia-username
        - name: PIA_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: pia-password
        - name: QB_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: qbittorrent-secrets
              key: qb-admin-password
        - name: PIA_REGION
          value: ""  # Leave empty for auto-select, or set to: us_east, us_west, ca_toronto, uk_london, etc.
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - name: wireguard-config
          mountPath: /etc/wireguard
        - name: lib-modules
          mountPath: /lib/modules
          readOnly: true
        - name: shared-data
          mountPath: /shared
        startupProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard interface is up
              wg show pia > /dev/null 2>&1
          initialDelaySeconds: 120
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 20  # Allow 5 minutes for VPN setup
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard is running and connected
              wg show pia > /dev/null 2>&1
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - |
              # Check if WireGuard is connected and port forwarding is working
              wg show pia > /dev/null 2>&1 && [ -f /opt/piavpn-manual-port ]
          initialDelaySeconds: 60
          periodSeconds: 15
          timeoutSeconds: 10
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
      
      # qBittorrent container
      - name: qbittorrent
        image: linuxserver/qbittorrent:latest
        command:
        - /bin/bash
        - -c
        - |
          echo "Waiting for VPN to be ready before starting qBittorrent..."
          # Wait for WireGuard interface to be up
          while ! ip link show pia > /dev/null 2>&1; do
            echo "Waiting for VPN interface pia..."
            sleep 5
          done
          echo "VPN interface ready, starting qBittorrent..."
          # Run the original entrypoint
          exec /init
        ports:
        - containerPort: 8080
          name: webui
          protocol: TCP
        - containerPort: 6881
          name: torrent-tcp
          protocol: TCP
        - containerPort: 6881
          name: torrent-udp
          protocol: UDP
        env:
        - name: PUID
          value: "1000"
        - name: PGID
          value: "1000"
        - name: TZ
          value: "America/New_York"
        - name: WEBUI_PORT
          value: "8080"
        volumeMounts:
        - name: qbittorrent-config
          mountPath: /config
        - name: jellyfin-media-shared
          mountPath: /downloads
        - name: shared-data
          mountPath: /shared
        startupProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 12  # Allow 2 minutes for startup
        livenessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
      
      volumes:
      - name: wireguard-config
        emptyDir: {}
      - name: shared-data
        emptyDir: {}
      - name: lib-modules
        hostPath:
          path: /lib/modules
          type: Directory
      - name: qbittorrent-config
        persistentVolumeClaim:
          claimName: qbittorrent-config
      # Use the existing jellyfin media volume for downloads
      - name: jellyfin-media-shared
        persistentVolumeClaim:
          claimName: jellyfin-media
      
      # Containers in same pod automatically share network namespace
      
      # Use cluster DNS initially, VPN will override DNS via iptables rules
      dnsPolicy: ClusterFirst
      restartPolicy: Always
